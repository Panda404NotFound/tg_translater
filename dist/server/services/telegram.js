"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.telegramService = void 0;
const axios_1 = __importDefault(require("axios"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
 */
class TelegramService {
    constructor() {
        this.token = process.env.BOT_TOKEN || '';
        this.apiUrl = `https://api.telegram.org/bot${this.token}`;
        if (!this.token) {
            console.warn('–í–Ω–∏–º–∞–Ω–∏–µ: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
        }
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
     * @param update –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
     */
    handleUpdate(update) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(update));
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (update.message && update.message.text) {
                    yield this.handleMessage(update.message);
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–æ–∫)
                if (update.callback_query) {
                    yield this.handleCallbackQuery(update.callback_query);
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram:', error);
                throw error;
            }
        });
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    handleMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const chatId = message.chat.id;
            const text = message.text || '';
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text.startsWith('/start')) {
                yield this.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º.');
                yield this.sendAppLink(chatId);
            }
            else if (text.startsWith('/help')) {
                yield this.sendMessage(chatId, '–Ø –ø–æ–º–æ–≥–∞—é –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º.');
                yield this.sendAppLink(chatId);
            }
            else {
                // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                yield this.sendMessage(chatId, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
                yield this.sendAppLink(chatId);
            }
        });
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
     * @param callbackQuery –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
     */
    handleCallbackQuery(callbackQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            // –í —ç—Ç–æ–π –∑–∞–≥–ª—É—à–∫–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback query
            yield axios_1.default.post(`${this.apiUrl}/answerCallbackQuery`, {
                callback_query_id: callbackQuery.id
            });
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param chatId ID —á–∞—Ç–∞
     * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    sendMessage(chatId, text) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield axios_1.default.post(`${this.apiUrl}/sendMessage`, {
                    chat_id: chatId,
                    text: text,
                    parse_mode: 'HTML'
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                throw error;
            }
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     * @param chatId ID —á–∞—Ç–∞
     */
    sendAppLink(chatId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const botUsername = process.env.BOT_USERNAME || '';
                if (!botUsername) {
                    yield this.sendMessage(chatId, '–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.');
                    return;
                }
                yield axios_1.default.post(`${this.apiUrl}/sendMessage`, {
                    chat_id: chatId,
                    text: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üé§ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫',
                                    web_app: { url: `https://t.me/${botUsername}/app` }
                                }
                            ]
                        ]
                    }
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
                throw error;
            }
        });
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Mini App
     * @param initData –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram
     * @returns true, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã
     */
    verifyInitData(initData) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            return true;
            // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:
            /*
            const secret = crypto.createHmac('sha256', 'WebAppData')
              .update(this.token)
              .digest();
            
            const params = new URLSearchParams(initData);
            const hash = params.get('hash');
            params.delete('hash');
            
            const dataCheckString = Array.from(params.entries())
              .sort(([a], [b]) => a.localeCompare(b))
              .map(([key, value]) => `${key}=${value}`)
              .join('\n');
            
            const hmac = crypto.createHmac('sha256', secret)
              .update(dataCheckString)
              .digest('hex');
            
            return hmac === hash;
            */
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData:', error);
            return false;
        }
    }
}
exports.telegramService = new TelegramService();
